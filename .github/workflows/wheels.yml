name: Wheels

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
     - ci-actions
  release:
    types:
      - published

env:
  CIBW_TEST_COMMAND: python {project}/tests/test.py


jobs:
  build_sdist:
    name: Build SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2

    - name: Install deps
      run: python -m pip install twine build

    - name: Build SDist
      run: python -m build -s

    - name: Check metadata
      run: twine check dist/*

    - uses: actions/upload-artifact@v2
      with:
        path: dist/*.tar.gz


  build_wheels:
    name: Wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest] # windows-latest,

    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-python@v2

    - name: Install cibuildwheel
      run: python -m pip install cibuildwheel==1.6.3

    # - name: Build MOOS
    #   uses: ./.github/actions/build-moos-core
    - name: Checkout MOOS source
      uses: actions/checkout@v2
      with:
        repository: 'themoos/core-moos'
        path: '${{ github.workspace }}/core-moos'

    - name: 'Run CMake'
      uses: lukka/run-cmake@v3
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{ github.workspace }}/core-moos/CMakeLists.txt'
        buildDirectory: '${{ github.workspace }}/core-moos/build'
        cmakeBuildType: 'Release'
        buildWithCMake: true
        cmakeAppendedArgs: '-DBUILD_SHARED_LIBS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON'

    - name: Install MOOS
      run: |
        cd ${{ github.workspace }}/core-moos/build
        cmake --install . --prefix ${{ github.workspace }}/.local/
        echo "PATH=$PATH:${{ github.workspace }}/.local/bin" >> $GITHUB_ENV

    # linux cibuildwheel uses a docker image - it maps workspace to /project
    - name: Create setup.cfg
      if: matrix.os == 'ubuntu-latest'
      run: |
        echo "[build_ext]" >> setup.cfg
        echo "include_dirs=/project/.local/include" >> setup.cfg
        echo "library_dirs=/project/.local/lib" >> setup.cfg
        cat setup.cfg

    - name: Create setup.cfg
      if: matrix.os == 'macos-latest'
      run: |
        echo "[build_ext]" >> setup.cfg
        echo "include_dirs=${{ github.workspace }}/.local/include" >> setup.cfg
        echo "library_dirs=${{ github.workspace }}/.local/lib" >> setup.cfg
        cat setup.cfg

    - name: Build wheel
      run: python -m cibuildwheel --output-dir wheelhouse
      env:
        # Python 2.7 on Windows requires a workaround for C++11 support,
        # built separately below
        # > skipping Python2.7 entirely
        CIBW_SKIP: cp27-*
        CIBW_BEFORE_TEST: if [ -d wheelhouse ]; then ls -lh wheelhouse; fi

    - name: Show files
      run: ls -lh wheelhouse
      shell: bash

    - name: Verify clean directory
      run: git diff --exit-code
      shell: bash

    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        path: wheelhouse/*.whl


  # Windows 2.7 (requires workaround for MSVC 2008 replacement)
  # build_win27_wheels:
  #   name: Py 2.7 wheels on Windows
  #   runs-on: windows-latest

  #   steps:
  #   - uses: actions/checkout@v1
  #     with:
  #       submodules: true

  #   - uses: actions/setup-python@v2

  #   - name: Install cibuildwheel
  #     run: python -m pip install cibuildwheel==1.6.3

  #   - uses: ilammy/msvc-dev-cmd@v1

  #   - name: Build MOOS
  #     uses: ./.github/actions/build-moos-core

  #   - name: Build 64-bit wheel
  #     run: python -m cibuildwheel --output-dir wheelhouse
  #     env:
  #       CIBW_BUILD: cp27-win_amd64
  #       DISTUTILS_USE_SDK: 1
  #       MSSdk: 1

  #   - uses: ilammy/msvc-dev-cmd@v1
  #     with:
  #       arch: x86

  #   - name: Build 32-bit wheel
  #     run: python -m cibuildwheel --output-dir wheelhouse
  #     env:
  #       CIBW_BUILD: cp27-win32
  #       DISTUTILS_USE_SDK: 1
  #       MSSdk: 1

  #   - name: Show files
  #     run: ls -lh wheelhouse
  #     shell: bash

  #   - name: Verify clean directory
  #     run: git diff --exit-code
  #     shell: bash

  #   - uses: actions/upload-artifact@v2
  #     with:
  #       path: wheelhouse/*.whl


  upload_all:
    name: Upload if release
    needs: [build_wheels, build_sdist] #build_win27_wheels
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - uses: actions/setup-python@v2

    - uses: actions/download-artifact@v2
      with:
        name: artifact
        path: dist

    - uses: pypa/gh-action-pypi-publish@v1.4.1
      with:
        user: __token__
        password: ${{ secrets.pypi_password }}
